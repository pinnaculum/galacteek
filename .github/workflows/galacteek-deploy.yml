name: galacteek

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

env:
  GO_IPFS_VERSION: 0.9.1
  FS_MIGRATE_VERSION: 2.0.1

jobs:
  build:
    # if: contains(toJson(github.event.commits), '[skip ci]') == false
    needs: create_release
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2

    - name: Checkout notbit
      uses: actions/checkout@v2
      with:
        repository: pinnaculum/notbit
        path: notbit

    - name: Checkout galacteek-ld-web4
      run: |
        git clone https://gitlab.com/galacteek/galacteek-ld-web4

    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install packages
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get install -y dzen2 xvfb herbstluftwm
        sudo apt-get install -y libxcb-xkb1 libxkbcommon-x11-0
        sudo apt-get install -y libzbar0
        sudo apt-get install -y tor libsystemd0
        sudo apt-get install -y autoconf automake gcc
        sudo apt-get install -y flatpak flatpak-builder

    - name: Install packages (macos)
      if: startsWith(matrix.os, 'mac')
      run: |
        brew install tor
        brew install 'openssl@1.1'
        brew install pkg-config autoconf automake

    - name: Install choco packages (Windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        choco install unzip
        choco install wget
        choco install 7zip.portable
        choco install nsis
        choco install tor
      shell: bash

    - name: Configure environment (1)
      run: |
        echo "G_VERSION=$(cat galacteek/VERSION)" >> $GITHUB_ENV

        echo "COMMIT_SHORT=$(echo $GITHUB_SHA|cut -c 1-8)" >> $GITHUB_ENV
        echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
        echo "GLK_ASSETS=$GITHUB_WORKSPACE/assets" >> $GITHUB_ENV

        mkdir "$GITHUB_WORKSPACE/assets"
      shell: bash

    - name: Configure environment (2)
      run: |
        echo "G_WHEEL_PATH=dist/galacteek-$G_VERSION-py3-none-any.whl" >> $GITHUB_ENV
      shell: bash

    - name: Configure bundle (a)
      run: |
        echo "BUNDLE_ROOT=Galacteek-${COMMIT_SHORT}" >> $GITHUB_ENV
      shell: bash

    - name: Configure bundle(b)
      if:
        contains('
          refs/heads/master
          refs/tags/v
        ', github.ref)
      run: |
        echo "BUNDLE_ROOT=Galacteek-${G_VERSION}" >> $GITHUB_ENV
      shell: bash

    - name: OS-specific vars (linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        echo "IPFS_DIST_OS=linux" >> $GITHUB_ENV
        echo "BUNDLE_FILENAME=${BUNDLE_ROOT}-x86_64.AppImage" >> $GITHUB_ENV
        echo "BUNDLE_PATH=${GLK_ASSETS}/${BUNDLE_ROOT}-x86_64.AppImage" >> $GITHUB_ENV
        echo "BUNDLE_FLATPAK_FILENAME=${BUNDLE_ROOT}-x86_64.flatpak" >> $GITHUB_ENV
        echo "BUNDLE_FLATPAK_PATH=${GLK_ASSETS}/${BUNDLE_ROOT}-x86_64.flatpak" >> $GITHUB_ENV

    - name: OS-specific vars (macOS)
      if: startsWith(matrix.os, 'macOS')
      run: |
        echo "IPFS_DIST_OS=darwin" >> $GITHUB_ENV
        echo "BUNDLE_FILENAME=${BUNDLE_ROOT}-x86_64.dmg" >> $GITHUB_ENV
        echo "BUNDLE_PATH=${GLK_ASSETS}/${BUNDLE_ROOT}-x86_64.dmg" >> $GITHUB_ENV

        echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $GITHUB_ENV
        echo "HOMEBREW_AUTO_UPDATING=0" >> $GITHUB_ENV
        echo "HOMEBREW_UPDATE_PREINSTALL=0" >> $GITHUB_ENV

        # Set PKG_CONFIG_PATH to point to brew's openssl libcrypto, for notbit
        # compilation
        ls /usr/local/Cellar/openssl@1.1

        echo "PKG_CONFIG_PATH=/usr/local/Cellar/openssl@1.1/1.1.1n/lib/pkgconfig:/usr/local/Cellar/openssl/1.1.1n/lib/pkgconfig" >> $GITHUB_ENV

    - name: OS-specific vars (win)
      if: startsWith(matrix.os, 'windows')
      run: |
        echo "IPFS_DIST_OS=windows" >> $GITHUB_ENV

        # echo "BUNDLE_FILENAME=${BUNDLE_ROOT}-x86_64.exe" >> $GITHUB_ENV
        # echo "BUNDLE_PATH=${GLK_ASSETS}/${BUNDLE_ROOT}-x86_64.exe" >> $GITHUB_ENV

        echo "BUNDLE_FILENAME=${BUNDLE_ROOT}-installer-x86_64.exe" >> $GITHUB_ENV
        echo "BUNDLE_PATH=${GLK_ASSETS}/${BUNDLE_ROOT}-installer-x86_64.exe" >> $GITHUB_ENV
      shell: bash

    - name: Fetch IPFS dists
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
      run: |
        wget https://dist.ipfs.io/go-ipfs/v${GO_IPFS_VERSION}/go-ipfs_v${GO_IPFS_VERSION}_${IPFS_DIST_OS}-amd64.tar.gz

        wget https://dist.ipfs.io/fs-repo-migrations/v${FS_MIGRATE_VERSION}/fs-repo-migrations_v${FS_MIGRATE_VERSION}_${IPFS_DIST_OS}-amd64.tar.gz

        tar -C $GITHUB_WORKSPACE -xzvf go-ipfs_v${GO_IPFS_VERSION}_${IPFS_DIST_OS}-amd64.tar.gz
        echo "${GITHUB_WORKSPACE}/go-ipfs" >> $GITHUB_PATH

        mv go-ipfs/ipfs go-ipfs/ipfs-${GO_IPFS_VERSION}

        tar -C $GITHUB_WORKSPACE -xzvf fs-repo-migrations_v${FS_MIGRATE_VERSION}_${IPFS_DIST_OS}-amd64.tar.gz
        echo "${GITHUB_WORKSPACE}/fs-repo-migrations" >> $GITHUB_PATH

    - name: Fetch IPFS dists (windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        wget "https://dist.ipfs.io/go-ipfs/v${GO_IPFS_VERSION}/go-ipfs_v${GO_IPFS_VERSION}_${IPFS_DIST_OS}-amd64.zip"
        wget "https://dist.ipfs.io/fs-repo-migrations/v${FS_MIGRATE_VERSION}/fs-repo-migrations_v${FS_MIGRATE_VERSION}_${IPFS_DIST_OS}-amd64.zip"

        unzip go-ipfs_v${GO_IPFS_VERSION}_${IPFS_DIST_OS}-amd64.zip
        unzip fs-repo-migrations_v${FS_MIGRATE_VERSION}_${IPFS_DIST_OS}-amd64.zip

      shell: bash

    - name: Fetch libmagic database (windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        wget https://github.com/nscaife/file-windows/releases/download/20170108/file-windows-20170108.zip
        # unzip file-windows-20170108.zip "magic.mgc"
      shell: bash

    - name: Fetch VC redist (windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        wget https://aka.ms/vs/16/release/vc_redist.x64.exe

    - name: Compile notbit
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
      run: |
        cd ${GITHUB_WORKSPACE}/notbit
        ./autogen.sh
        make
      shell: bash

    - name: Fetch notbit (windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        wget https://github.com/pinnaculum/notbit/releases/download/continuous-ci/notbit-cygwin.zip
        unzip notbit-cygwin.zip
      shell: bash

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        #pip install -r requirements-dev.txt
        #pip install -r requirements.txt

    - name: Create virtual environment
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
      run: |
        python -m venv "${GITHUB_WORKSPACE}/venvg"
        source ${GITHUB_WORKSPACE}/venvg/bin/activate

    - name: Create virtual environment (win)
      if: startsWith(matrix.os, 'windows-disabled')
      run: |
        python -m venv venvg
        ./venvg/Scripts/activate.bat

    - name: Virtual environment install
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
      run: |
        pip install --upgrade pip
        pip install wheel
        pip install -r requirements-dev.txt
        pip install -r requirements.txt
        pip install -e '.[ui-pyqt-5.15]'

        # Build UI and docs, install and build sdist and bwheel
        python setup.py build build_docs install
        python setup.py sdist bdist_wheel

    # - name: venv cache
    #  id: cache-venv
    #  if: startsWith(matrix.os, 'windows')
    #  uses: actions/cache@v2
    #  with:
    #    path: ./venvg
    #    key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
    #    restore-keys: |
    #      ${{ runner.os }}-pip-

    - name: Virtual environment install (win)
      # if: startsWith(matrix.os, 'windows') && steps.cache-venv.outputs.cache-hit != 'true'
      if: startsWith(matrix.os, 'windows')
      run: |
        python -m venv venvg
        ./venvg/Scripts/activate.bat

        pip install --upgrade pip
        pip install wheel
        pip install "sphinx==1.8.5"
        pip install -r requirements.txt
        pip install -e '.[ui-pyqt-5.15]'

        # bsddb3 wheel
        wget https://ipfs.io/ipfs/bafybeibwig6rg7524d7aopuu74v4gnevqno5gxq4srevtotme2dtdcixzq/bsddb3-6.2.9-cp37-cp37m-win_amd64.whl
        pip install bsddb3-6.2.9-cp37-cp37m-win_amd64.whl

    - name: l (win)
      if: startsWith(matrix.os, 'windows')
      run: |
        python setup.py build build_docs install
        python setup.py sdist bdist_wheel

    - name: Tox
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        # Run tox just in the linux environment
        # tox -e py37
        echo "Disabled for now (need to fix pytest-qt use in GA)"

    - name: Build AppImage
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cd AppImage
        ./appimage-build
        cd ..

    - name: Build Flatpak
      if: startsWith(matrix.os, 'ubuntu') && contains(toJson(github.event.commits), '[flatpak]') == true
      run: |
        flatpak-builder --force-clean --repo=gflat-repo flatpak-build packaging/linux/flatpak/org.flatpak.galacteek.Galacteek.yaml
        flatpak build-bundle gflat-repo ${BUNDLE_FLATPAK_FILENAME} org.flatpak.galacteek.Galacteek

    - name: Build DMG
      if: startsWith(matrix.os, 'macOS')
      run: |
        ./ci/build-dmg.sh

    - name: Build installer (windows, NSIS)
      if: startsWith(matrix.os, 'windows')
      run: |
        rm -rf dist
        ./venvg/Scripts/activate.bat
        ./ci/build-pyinstaller-nsi.sh ${{ env.G_WHEEL_PATH }}
      shell: bash

    - name: Release main asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_name: ${{ env.BUNDLE_FILENAME }}
        asset_path: ${{ env.BUNDLE_PATH }}
        asset_content_type: application/octet-stream

    - name: Release flatpak asset
      if: startsWith(matrix.os, 'ubuntu') && contains(toJson(github.event.commits), '[flatpak]') == true
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_name: ${{ env.BUNDLE_FLATPAK_FILENAME }}
        asset_path: ${{ env.BUNDLE_FLATPAK_PATH }}
        asset_content_type: application/octet-stream

  create_release:
    # if: contains(toJson(github.event.commits), '[skip ci]') == false
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    env:
      GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      TAGNAME: continuous-newci

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Release config
        id: release_config
        run: |
          echo "G_VERSION=$(cat galacteek/VERSION)" >> $GITHUB_ENV
          echo "COMMIT_SHORT=$(echo $GITHUB_SHA|cut -c 1-8)" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAGNAME=continuous-${GITHUB_REF##*/}" >> $GITHUB_ENV
        shell: bash

      - name: Release config (b)
        id: release_config_b
        if:
          contains('
            refs/heads/master
            refs/tags/v
          ', github.ref)
        run: |
          echo "TAGNAME=v${G_VERSION}" >> $GITHUB_ENV

      - name: Remove previous release
        run: |
          curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ github.token }}" -XDELETE https://api.github.com/repos/pinnaculum/galacteek/git/refs/tags/${{ env.TAGNAME }}
          curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ github.token }}" -XDELETE https://api.github.com/repos/pinnaculum/galacteek/releases/${{ env.TAGNAME }}
          curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ github.token }}" -XDELETE https://api.github.com/repos/pinnaculum/galacteek/releases/tag/${{ env.TAGNAME }}

      - name: Get Changelog Entry
        id: changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_depth: 10
          version: ${{ env.G_VERSION }}
          path: ./CHANGELOG.md

      - name: Create release
        id: create_release
        uses: actions/create-release@v1

        with:
          prerelease: true
          tag_name: ${{ env.TAGNAME}}
          release_name: Galacteek ${{ env.G_VERSION }}
          draft: false
          body: |
            # Galacteek ${{ env.G_VERSION }} **prerelease**

            ## Release log

            ${{ steps.changelog.outputs.changes }}

            # Using the AppImage

            After downloading the AppImage, make it executable and then run it:

            > chmod +x Galacteek-${{ env.G_VERSION }}-x86_64.AppImage
            ./Galacteek-${{ env.G_VERSION }}-x86_64.AppImage

            The AppImage does **not** bundle libstdc++. If you use a Linux system with an old libstdc++ and cannot run the AppImage, please open an issue.

            Be sure to install all the **gstreamer** packages to be able to use the mediaplayer.

            Trouble with running the AppImage ? [Check the wiki](https://github.com/pinnaculum/galacteek/wiki/AppImage#troubleshooting) or [file an issue](https://github.com/pinnaculum/galacteek/issues/new?assignees=&labels=appimage&template=appimage-issue.md&title=Cannot+run+the+AppImage)

            # Using the DMG image

            After opening/mounting the DMG image, hold Control and click on the **galacteek** icon, select **Open** and then accept. You probably need to allow the system to install applications *from anywhere* in the security settings.
